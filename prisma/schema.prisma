generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(cuid())
  name            String?
  clerk_id        String?         @unique
  username        String?         @unique
  image           String?
  email           String?         @unique
  password        String?
  description     String?
  dateNce         DateTime?
  admin           Roles           @default(user)
  channels        ChannelMember[]
  marketingEmails Boolean?        @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  Server          Server[]
  Message         Message[]
  MessageRead     MessageRead[]

  sentFriendRequests     Friendship[] @relation("Requesters")
  receivedFriendRequests Friendship[] @relation("Addressees")
}

model Server {
  id         String          @id @default(cuid())
  name       String
  ownerId    String
  image      String?
  owner      User            @relation(fields: [ownerId], references: [clerk_id])
  channels   Channel[]
  members    ChannelMember[]
  inviteCode String          @unique @default(uuid())
  createdAt  DateTime        @default(now())
  Category   Category[]
}

model Channel {
  id          String       @id @default(cuid())
  name        String
  serverId    String
  server      Server       @relation(fields: [serverId], references: [id])
  categoryId  String?
  category    Category?    @relation(fields: [categoryId], references: [id])
  messages    Message[]
  typeChannel ChannelTypes @default(TEXT)
  isPrivate   Boolean      @default(false)
  bot         Bot?         @relation(fields: [botId], references: [id])
  botId       String?      @unique
  createdAt   DateTime     @default(now())
}

model Category {
  id        String    @id @default(cuid())
  name      String
  serverId  String
  server    Server    @relation(fields: [serverId], references: [id])
  channels  Channel[]
  createdAt DateTime  @default(now())
}

model ChannelMember {
  id       String   @id @default(cuid())
  userId   String
  serverId String
  user     User     @relation(fields: [userId], references: [clerk_id])
  server   Server   @relation(fields: [serverId], references: [id])
  joinedAt DateTime @default(now())

  @@unique([userId, serverId])
}

model Message {
  id          String        @id @default(cuid())
  content     String
  userId      String
  image       String?
  channelId   String
  user        User          @relation(fields: [userId], references: [clerk_id])
  channel     Channel       @relation(fields: [channelId], references: [id])
  createdAt   DateTime      @default(now())
  MessageRead MessageRead[]
}

model MessageRead {
  id        String   @id @default(cuid())
  userId    String
  messageId String
  user      User     @relation(fields: [userId], references: [clerk_id])
  message   Message  @relation(fields: [messageId], references: [id])
  readAt    DateTime @default(now())

  @@unique([userId, messageId])
}

model Friendship {
  id          String       @id @default(cuid())
  requesterId String
  addresseeId String
  status      FriendStatus @default(PENDING)
  createdAt   DateTime     @default(now())

  requester User @relation("Requesters", fields: [requesterId], references: [clerk_id])
  addressee User @relation("Addressees", fields: [addresseeId], references: [clerk_id])

  @@unique([requesterId, addresseeId])
}

enum FriendStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

model Bot {
  id          String   @id @default(cuid())
  name        String
  description String?
  channel     Channel?
}

enum Roles {
  admin
  user
}

enum ChannelTypes {
  TEXT
  VOZ
  FORUM
  ANNOUNCEMENT
  STAGE
}
